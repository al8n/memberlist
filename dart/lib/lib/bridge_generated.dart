// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.75.2.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.io.dart' if (dart.library.html) 'bridge_generated.web.dart';

class ShowbizDartImpl implements ShowbizDart {
  final ShowbizDartPlatform _platform;
  factory ShowbizDartImpl(ExternalLibrary dylib) => ShowbizDartImpl.raw(ShowbizDartPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory ShowbizDartImpl.wasm(FutureOr<WasmModule> module) => ShowbizDartImpl(module as ExternalLibrary);
  ShowbizDartImpl.raw(this._platform);
  Future<Options> lanStaticMethodOptions({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_lan__static_method__Options(port_),
      parseSuccessData: (d) => _wire2api_options(d),
      constMeta: kLanStaticMethodOptionsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLanStaticMethodOptionsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "lan__static_method__Options",
        argNames: [],
      );

  Future<Options> wanStaticMethodOptions({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_wan__static_method__Options(port_),
      parseSuccessData: (d) => _wire2api_options(d),
      constMeta: kWanStaticMethodOptionsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kWanStaticMethodOptionsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "wan__static_method__Options",
        argNames: [],
      );

  Future<Options> localStaticMethodOptions({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_local__static_method__Options(port_),
      parseSuccessData: (d) => _wire2api_options(d),
      constMeta: kLocalStaticMethodOptionsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLocalStaticMethodOptionsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "local__static_method__Options",
        argNames: [],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  Duration _wire2api_Chrono_Duration(dynamic raw) {
    return wire2apiDuration(_wire2api_i64(raw));
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  List<String>? _wire2api_opt_StringList(dynamic raw) {
    return raw == null ? null : _wire2api_StringList(raw);
  }

  Uint8List? _wire2api_opt_uint_8_list(dynamic raw) {
    return raw == null ? null : _wire2api_uint_8_list(raw);
  }

  Options _wire2api_options(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 33) throw Exception('unexpected arr length: expect 33 but see ${arr.length}');
    return Options(
      bridge: this,
      name: _wire2api_String(arr[0]),
      label: _wire2api_String(arr[1]),
      skipInboundLabelCheck: _wire2api_bool(arr[2]),
      bindAddr: _wire2api_String(arr[3]),
      advertiseAddr: _wire2api_opt_String(arr[4]),
      protocolVersion: _wire2api_u8(arr[5]),
      tcpTimeout: _wire2api_Chrono_Duration(arr[6]),
      indirectChecks: _wire2api_usize(arr[7]),
      retransmitMult: _wire2api_usize(arr[8]),
      suspicionMult: _wire2api_usize(arr[9]),
      suspicionMaxTimeoutMult: _wire2api_usize(arr[10]),
      pushPullInterval: _wire2api_Chrono_Duration(arr[11]),
      probeInterval: _wire2api_Chrono_Duration(arr[12]),
      probeTimeout: _wire2api_Chrono_Duration(arr[13]),
      disableTcpPings: _wire2api_bool(arr[14]),
      awarenessMaxMultiplier: _wire2api_usize(arr[15]),
      gossipInterval: _wire2api_Chrono_Duration(arr[16]),
      gossipNodes: _wire2api_usize(arr[17]),
      gossipToTheDeadTime: _wire2api_Chrono_Duration(arr[18]),
      gossipVerifyIncoming: _wire2api_bool(arr[19]),
      gossipVerifyOutgoing: _wire2api_bool(arr[20]),
      enableCompression: _wire2api_bool(arr[21]),
      secretKey: _wire2api_opt_uint_8_list(arr[22]),
      delegateProtocolVersion: _wire2api_u8(arr[23]),
      delegateProtocolMin: _wire2api_u8(arr[24]),
      delegateProtocolMax: _wire2api_u8(arr[25]),
      dnsConfigPath: _wire2api_String(arr[26]),
      handoffQueueDepth: _wire2api_usize(arr[27]),
      packetBufferSize: _wire2api_usize(arr[28]),
      deadNodeReclaimTime: _wire2api_Chrono_Duration(arr[29]),
      requireNodeNames: _wire2api_bool(arr[30]),
      allowedCidrs: _wire2api_opt_StringList(arr[31]),
      queueCheckInterval: _wire2api_Chrono_Duration(arr[32]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }
}

// Section: api2wire

// Section: finalizer
