#![allow(
  non_camel_case_types,
  unused,
  clippy::redundant_closure,
  clippy::useless_conversion,
  clippy::unit_arg,
  clippy::double_parens,
  non_snake_case,
  clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.75.2.

use crate::options::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_lan__static_method__Options_impl(port_: MessagePort) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "lan__static_method__Options",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || move |task_callback| Ok(Options::lan()),
  )
}
fn wire_wan__static_method__Options_impl(port_: MessagePort) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "wan__static_method__Options",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || move |task_callback| Ok(Options::wan()),
  )
}
fn wire_local__static_method__Options_impl(port_: MessagePort) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap(
    WrapInfo {
      debug_name: "local__static_method__Options",
      port: Some(port_),
      mode: FfiCallMode::Normal,
    },
    move || move |task_callback| Ok(Options::local()),
  )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
  fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
  *mut S: Wire2Api<T>,
{
  fn wire2api(self) -> Option<T> {
    (!self.is_null()).then(|| self.wire2api())
  }
}
// Section: impl IntoDart

impl support::IntoDart for Options {
  fn into_dart(self) -> support::DartAbi {
    vec![
      self.name.into_dart(),
      self.label.into_dart(),
      self.skip_inbound_label_check.into_dart(),
      self.bind_addr.into_dart(),
      self.advertise_addr.into_dart(),
      self.protocol_version.into_dart(),
      self.tcp_timeout.into_dart(),
      self.indirect_checks.into_dart(),
      self.retransmit_mult.into_dart(),
      self.suspicion_mult.into_dart(),
      self.suspicion_max_timeout_mult.into_dart(),
      self.push_pull_interval.into_dart(),
      self.probe_interval.into_dart(),
      self.probe_timeout.into_dart(),
      self.disable_tcp_pings.into_dart(),
      self.awareness_max_multiplier.into_dart(),
      self.gossip_interval.into_dart(),
      self.gossip_nodes.into_dart(),
      self.gossip_to_the_dead_time.into_dart(),
      self.gossip_verify_incoming.into_dart(),
      self.gossip_verify_outgoing.into_dart(),
      self.enable_compression.into_dart(),
      self.secret_key.into_dart(),
      self.delegate_protocol_version.into_dart(),
      self.delegate_protocol_min.into_dart(),
      self.delegate_protocol_max.into_dart(),
      self.dns_config_path.into_dart(),
      self.handoff_queue_depth.into_dart(),
      self.packet_buffer_size.into_dart(),
      self.dead_node_reclaim_time.into_dart(),
      self.require_node_names.into_dart(),
      self.allowed_cidrs.into_dart(),
      self.queue_check_interval.into_dart(),
    ]
    .into_dart()
  }
}
impl support::IntoDartExceptPrimitive for Options {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "bridge_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
