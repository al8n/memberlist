name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README'
      - 'COPYRIGHT'
      - 'LICENSE*'
      - '**.md'
      - '**.txt'
  pull_request:
    paths-ignore:
      - 'README'
      - 'COPYRIGHT'
      - 'LICENSE*'
      - '**.md'
      - '**.txt'

env:
  CARGO_TERM_COLOR: always

jobs:
  # Check formatting
  rustfmt:
    name: rustfmt
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      # --no-self-update is necessary because the windows environment cannot self-update rustup.exe.
      run: rustup update nightly --no-self-update && rustup default nightly && rustup component add rustfmt
    - name: Check formatting
      run: cargo fmt --all -- --check


  # Apply clippy lints
  clippy:
    name: clippy
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      # --no-self-update is necessary because the windows environment cannot self-update rustup.exe.
      run: rustup update nightly --no-self-update && rustup default nightly && rustup component add clippy
    - name: Apply clippy lints (unix)
      run: cargo clippy --all-features

  # build:
  #   name: build
  #   strategy:
  #     matrix:
  #       os:
  #         - ubuntu-latest
  #         - macos-latest
  #         - windows-latest
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Install Rust
  #     # --no-self-update is necessary because the windows environment cannot self-update rustup.exe.
  #     run: rustup update nightly --no-self-update && rustup default nightly
  #   - name: Install cargo-hack
  #     run: cargo install cargo-hack
  #   - name: Cache ~/.cargo
  #     uses: actions/cache@v3
  #     with:
  #       path: ~/.cargo
  #       key: ${{ runner.os }}-coverage-dotcargo
  #   - name: Run build (unix)
  #     run: cargo hack build --feature-powerset --group-features dns,dns-over-quic,dns-over-https-rustls,dns-over-rustls,dns-over-openssl,dns-over-native-tls,dns-webpki-roots,dns-native-certs,dnssec-openssl,dnssec-ring,dnssec --exclude-features tracing
  #     if: matrix.os != 'windows-latest'
  #   - name: Run build (windows)
  #     run: cargo hack build --feature-powerset --group-features dns,dns-over-quic,dns-over-https-rustls,dns-over-rustls,dns-over-native-tls,dns-webpki-roots,dns-native-certs,dnssec-ring,dnssec --exclude-features tracing,dnssec-openssl,dns-over-openssl
  #     if: matrix.os == 'windows-latest'
  
  net-transport:
    name: test
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      run: rustup update stable && rustup default stable
    - name: Install cargo-hack
      run: cargo install cargo-hack
    - name: Cache ~/.cargo
      uses: actions/cache@v3
      with:
        path: ~/.cargo
        key: ${{ runner.os }}-coverage-dotcargo
    - name: Run test
      run: cargo hack test --feature-powerset --group-features dns,dns-over-quic,dns-over-https-rustls,dns-over-rustls,dns-over-openssl,dns-over-native-tls,dns-webpki-roots,dns-native-certs,dnssec-openssl,dnssec-ring,dnssec --exclude-features tracing
      if: matrix.os != 'windows-latest'
      working-directory: transports/net
    - name: Run test (windows)
      run: cargo hack test --feature-powerset --group-features dns,dns-over-quic,dns-over-https-rustls,dns-over-rustls,dns-over-native-tls,dns-webpki-roots,dns-native-certs,dnssec-ring,dnssec --exclude-features tracing,dnssec-openssl,dns-over-openssl,native-tls
      if: matrix.os == 'windows-latest'
      working-directory: transports/net

  coverage:
    name: coverage
    runs-on: ubuntu-latest
    needs:
      - rustfmt
      - clippy
      - net-transport
    steps:
      - uses: actions/checkout@v3
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - uses: actions-rs/install@v0.1
        with:
          crate: cargo-tarpaulin
          version: latest
      - name: Cache ~/.cargo
        uses: actions/cache@v3
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-coverage-dotcargo
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-coverage-cargo-build-target
      - name: Run tarpaulin
        uses: actions-rs/cargo@v1
        with:
          command: tarpaulin
          args: --all-features --run-types tests --run-types doctests --workspace --out xml
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3.1.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
