name: quic_memberlist

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README'
      - 'COPYRIGHT'
      - 'LICENSE*'
      - '**.md'
      - '**.txt'
  pull_request:
    paths-ignore:
      - 'README'
      - 'COPYRIGHT'
      - 'LICENSE*'
      - '**.md'
      - '**.txt'

env:
  CARGO_TERM_COLOR: always

jobs:
  # Check formatting
  rustfmt:
    name: rustfmt
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      # --no-self-update is necessary because the windows environment cannot self-update rustup.exe.
      run: rustup update stable && rustup default stable && rustup component add rustfmt
    - name: Check formatting
      run: cargo fmt --all -- --check
      working-directory: memberlist


  # Apply clippy lints
  clippy:
    name: clippy
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      # --no-self-update is necessary because the windows environment cannot self-update rustup.exe.
      run: rustup update stable && rustup default stable && rustup component add clippy
    - name: Install OpenSSL (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
        vcpkg install openssl:x64-windows-static-md
    - name: Apply clippy lints (unix)
      run: cargo clippy --all-features
      working-directory: memberlist

  build:
    name: build
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      # --no-self-update is necessary because the windows environment cannot self-update rustup.exe.
      run: rustup update nightly --no-self-update && rustup default nightly
    - name: Install OpenSSL (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
        vcpkg install openssl:x64-windows-static-md
    - name: Install cargo-hack
      run: cargo install cargo-hack
    - name: Cache ~/.cargo
      uses: actions/cache@v3
      with:
        path: ~/.cargo
        key: ${{ matrix.os }}-coverage-dotcargo
    - name: Run build (unix)
      run: cargo hack build --feature-powerset --exclude-features tokio,smol,async-std,serde,rkyv,dns-over-quic,dns-over-h3,dns-over-https-rustls,dns-over-rustls,dns-over-openssl,dns-over-native-tls,dns-webpki-roots,dns-native-certs,dnssec-openssl,dnssec-ring,dnssec,metrics,tcp,tls,native-tls,net
      working-directory: memberlist

  tokio-s2n-test:
    name: tokio-s2n-test
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      run: rustup update stable && rustup default stable
    - name: Install OpenSSL (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
        vcpkg install openssl:x64-windows-static-md
    - name: Setup loopback interface (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: ci\setup_subnet_windows.ps1
    - name: Setup loopback interface (MacOS)
      if: matrix.os == 'macos-latest'
      run: ci/setup_subnet_macos.sh
    - name: Setup loopback interface (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: ci/setup_subnet_ubuntu.sh
    - name: Install cargo-hack
      run: cargo install cargo-hack
    - name: Cache ~/.cargo
      uses: actions/cache@v3
      with:
        path: ~/.cargo
        key: ${{ matrix.os }}-coverage-dotcargo
    - name: Run test
      run: cargo test --no-default-features --features compression,test,tokio,s2n,metrics
      working-directory: memberlist

  tokio-quinn-test:
    name: tokio-quinn-test
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      run: rustup update stable && rustup default stable
    - name: Install OpenSSL (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
        vcpkg install openssl:x64-windows-static-md
    - name: Setup loopback interface (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: ci\setup_subnet_windows.ps1
    - name: Setup loopback interface (MacOS)
      if: matrix.os == 'macos-latest'
      run: ci/setup_subnet_macos.sh
    - name: Setup loopback interface (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: ci/setup_subnet_ubuntu.sh
    - name: Install cargo-hack
      run: cargo install cargo-hack
    - name: Cache ~/.cargo
      uses: actions/cache@v3
      with:
        path: ~/.cargo
        key: ${{ matrix.os }}-coverage-dotcargo
    - name: Run test
      run: cargo test --no-default-features --features compression,test,tokio,quinn,metrics
      working-directory: memberlist

  async-std-quinn-test:
    name: async-std-quinn-test
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      run: rustup update stable && rustup default stable
    - name: Install OpenSSL (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
        vcpkg install openssl:x64-windows-static-md
    - name: Setup loopback interface (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: ci\setup_subnet_windows.ps1
    - name: Setup loopback interface (MacOS)
      if: matrix.os == 'macos-latest'
      run: ci/setup_subnet_macos.sh
    - name: Setup loopback interface (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: ci/setup_subnet_ubuntu.sh
    - name: Install cargo-hack
      run: cargo install cargo-hack
    - name: Cache ~/.cargo
      uses: actions/cache@v3
      with:
        path: ~/.cargo
        key: ${{ matrix.os }}-coverage-dotcargo
    - name: Run test
      run: cargo test --no-default-features --features compression,test,async-std,quinn,metrics
      working-directory: memberlist
  
  smol-quinn-test:
    name: smol-quinn-test
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      run: rustup update stable && rustup default stable
    - name: Install OpenSSL (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
        vcpkg install openssl:x64-windows-static-md
    - name: Setup loopback interface (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: ci\setup_subnet_windows.ps1
    - name: Setup loopback interface (MacOS)
      if: matrix.os == 'macos-latest'
      run: ci/setup_subnet_macos.sh
    - name: Setup loopback interface (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: ci/setup_subnet_ubuntu.sh
    - name: Install cargo-hack
      run: cargo install cargo-hack
    - name: Cache ~/.cargo
      uses: actions/cache@v3
      with:
        path: ~/.cargo
        key: ${{ matrix.os }}-coverage-dotcargo
    - name: Run test
      run: cargo test --no-default-features --features compression,test,smol,quinn,metrics
      working-directory: memberlist
