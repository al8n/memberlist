name: quinn

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README'
      - 'COPYRIGHT'
      - 'LICENSE*'
      - '**.md'
      - '**.txt'
  pull_request:
    paths-ignore:
      - 'README'
      - 'COPYRIGHT'
      - 'LICENSE*'
      - '**.md'
      - '**.txt'

env:
  CARGO_TERM_COLOR: always

jobs:
  # Check formatting
  rustfmt:
    name: rustfmt
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      # --no-self-update is necessary because the windows environment cannot self-update rustup.exe.
      run: rustup update stable && rustup default stable && rustup component add rustfmt
    - name: Check formatting
      run: cargo fmt --all -- --check
      working-directory: transports/quic


  # Apply clippy lints
  clippy:
    name: clippy
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      # --no-self-update is necessary because the windows environment cannot self-update rustup.exe.
      run: rustup update stable && rustup default stable && rustup component add clippy
    - name: Install OpenSSL (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
        vcpkg install openssl:x64-windows-static-md
    - name: Apply clippy lints (unix)
      run: cargo clippy --all-features
      working-directory: transports/quic

  build:
    name: build
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      # --no-self-update is necessary because the windows environment cannot self-update rustup.exe.
      run: rustup update nightly --no-self-update && rustup default nightly
    - name: Install OpenSSL (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
        vcpkg install openssl:x64-windows-static-md
    - name: Install cargo-hack
      run: cargo install cargo-hack
    - name: Cache ~/.cargo
      uses: actions/cache@v3
      with:
        path: ~/.cargo
        key: ${{ matrix.os }}-coverage-dotcargo
    - name: Run build (unix)
      run: cargo hack build --feature-powerset --exclude-features serde,rkyv,dns-over-quic,dns-over-h3,dns-over-https-rustls,dns-over-rustls,dns-over-openssl,dns-over-native-tls,dns-webpki-roots,dns-native-certs,dnssec-openssl,dnssec-ring,dnssec
      working-directory: transports/quic

  tokio-test:
    name: tokio-test
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          # - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      run: rustup update stable && rustup default stable
    - name: Install OpenSSL (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
        vcpkg install openssl:x64-windows-static-md
    - name: Install cargo-hack
      run: cargo install cargo-hack
    - name: Cache ~/.cargo
      uses: actions/cache@v3
      with:
        path: ~/.cargo
        key: ${{ matrix.os }}-coverage-dotcargo
    - name: Run test
      run: cargo test --features test,s2n,quinn,tokio
      working-directory: transports/quic

  async-std-test:
    name: async-std-test
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          # - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      run: rustup update stable && rustup default stable
    - name: Install OpenSSL (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
        vcpkg install openssl:x64-windows-static-md
    - name: Install cargo-hack
      run: cargo install cargo-hack
    - name: Cache ~/.cargo
      uses: actions/cache@v3
      with:
        path: ~/.cargo
        key: ${{ matrix.os }}-coverage-dotcargo
    - name: Run test
      run: cargo test --features test,s2n,quinn,async-std
      working-directory: transports/quic
  
  smol-test:
    name: smol-test
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          # - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      run: rustup update stable && rustup default stable
    - name: Install OpenSSL (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
        vcpkg install openssl:x64-windows-static-md
    - name: Install cargo-hack
      run: cargo install cargo-hack
    - name: Cache ~/.cargo
      uses: actions/cache@v3
      with:
        path: ~/.cargo
        key: ${{ matrix.os }}-coverage-dotcargo
    - name: Run test
      run: cargo test --features test,s2n,quinn,smol
      working-directory: transports/quic

  coverage:
    name: coverage
    strategy:
      matrix:
        os:
          - ubuntu-latest
    runs-on: ${{ matrix.os }}
    needs:
      - rustfmt
      - clippy
      - tokio-test
      - async-std-test
      - smol-test
      - build
    steps:
      - uses: actions/checkout@v3
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - uses: actions-rs/install@v0.1
        with:
          crate: cargo-tarpaulin
          version: latest
      - name: Cache ~/.cargo
        uses: actions/cache@v3
        with:
          path: ~/.cargo
          key: ${{ matrix.os }}-coverage-dotcargo
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ matrix.os }}-coverage-cargo-build-target
      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin --force
      - name: Run cargo-tarpaulin
        working-directory: transports/quic
        run: cargo-tarpaulin -- --features quinn,s2n,tokio --run-types tests -o xml 
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3.1.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: flase
          directory: transports/quic
          flags: transports/quic