/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/**
 * A `Duration` type to represent a span of time, typically used for system
 * timeouts.
 *
 * Each `Duration` is composed of a whole number of seconds and a fractional part
 * represented in nanoseconds. If the underlying system does not support
 * nanosecond-level precision, APIs binding a system timeout will typically round up
 * the number of nanoseconds.
 */
export class Duration {
  /**
   * Creates a new duration from the specified number of milliseconds.
   * If the number less than 0, the duration will be 0.
   */
  constructor(millis: number)
  static zero(): Duration
  /**
   * Creates a new duration from the specified number of milliseconds.
   * If the number less than 0, the duration will be 0.
   */
  static fromMillis(millis: number): Duration
  /**
   * Creates a new duration from the specified number of seconds.
   * If the number less than 0, the duration will be 0.
   */
  static fromSecs(secs: number): Duration
  /** Returns the total number of whole milliseconds contained by this `Duration`. */
  asMillis(): number
  /**
   * Returns the number of _whole_ seconds contained by this `Duration`.
   *
   * The returned value does not include the fractional (nanosecond) part of the
   * duration.
   */
  asSecs(): number
  /** Returns true if this `Duration` spans no time. */
  isZero(): boolean
}
/**
 * Options for configuring a memberlist.
 *
 * The default configuration is optimized for most WAN environments.
 *
 * # Factory Methods
 *
 * - `lan`:
 *
 *   Returns a sane set of configurations for Memberlist.
 *   It uses the hostname as the node name, and otherwise sets very conservative
 *   values that are sane for most LAN environments. The default configuration
 *   errs on the side of caution, choosing values that are optimized
 *   for higher convergence at the cost of higher bandwidth usage. Regardless,
 *   these values are a good starting point when getting started with memberlist.
 *
 * - `wan`:
 *
 *   Returns a configuration
 *   that is optimized for most WAN environments. The default configuration is
 *   still very conservative and errs on the side of caution.
 *
 * - `local`:
 *
 *   Returns a configuration
 *   that is optimized for a local loopback environments. The default configuration is
 *   still very conservative and errs on the side of caution.
 *
 * - `fromJSON`:
 *
 *   Deserializes the options from JSON string. The JSON string must be a serialized by `toJSON`.
 *
 * - `fromYAML`:
 *
 *   Deserializes the options from YAML string. The YAML string must be a serialized by `toYAML`.
 *
 * # Avaliable Settings
 *
 * - **name**
 *
 *   The name of this node. This must be unique in the cluster.
 *
 * - **label**
 *
 *   Label is an optional set of bytes to include on the outside of each
 *   packet and stream.
 *   If gossip encryption is enabled and this is set it is treated as GCM
 *   authenticated data.
 *
 * - **skipInboundLabelCheck**
 *
 *   Skips the check that inbound packets and gossip
 *   streams need to be label prefixed.
 *
 * - **bindAddr**
 *
 *   Configuration related to what address to bind to and ports to
 *   listen on. The port is used for both UDP and TCP gossip. It is
 *   assumed other nodes are running on this port, but they do not need
 *   to.
 *
 * - **advertiseAddr**
 *
 *   Configuration related to what address to advertise to other
 *   cluster members. Used for nat traversal.
 *
 * - **protocolVersion**
 *
 *   The configured protocol version that we
 *   will _speak_. This must be between [`MIN_PROTOCOL_VERSION`] and
 *   [`MAX_PROTOCOL_VERSION`].
 *
 * - **tcpTimeout**
 *
 *   The timeout for establishing a stream connection with
 *   a remote node for a full state sync, and for stream read and write
 *   operations. This is a legacy name for backwards compatibility, but
 *   should really be called StreamTimeout now that we have generalized
 *   the transport.
 *
 * - **indirectChecks**
 *
 *   The number of nodes that will be asked to perform
 *   an indirect probe of a node in the case a direct probe fails. Memberlist
 *   waits for an ack from any single indirect node, so increasing this
 *   number will increase the likelihood that an indirect probe will succeed
 *   at the expense of bandwidth.
 *
 * - **retransmitMult**
 *
 *   The multiplier for the number of retransmissions
 *   that are attempted for messages broadcasted over gossip. The actual
 *   count of retransmissions is calculated using the formula:
 *
 *     `retransmits = retransmitMult * log(N+1)`
 *
 *   This allows the retransmits to scale properly with cluster size. The
 *   higher the multiplier, the more likely a failed broadcast is to converge
 *   at the expense of increased bandwidth.
 *
 * - **suspicionMult**
 *
 *   The multiplier for determining the time an
 *   inaccessible node is considered suspect before declaring it dead.
 *   The actual timeout is calculated using the formula:
 *
 *     `suspicionTimeout = suspicionMult * log(N+1) * probeInterval`
 *
 *   This allows the timeout to scale properly with expected propagation
 *   delay with a larger cluster size. The higher the multiplier, the longer
 *   an inaccessible node is considered part of the cluster before declaring
 *   it dead, giving that suspect node more time to refute if it is indeed
 *   still alive.
 *
 * - **suspicionMaxTimeoutMult**
 *
 *   The multiplier applied to the
 *   `suspicion_timeout` used as an upper bound on detection time. This max
 *   timeout is calculated using the formula:
 *
 *   `suspicionMaxTimeout = suspicionMaxTimeoutMult * suspicionTimeout`
 *
 *   If everything is working properly, confirmations from other nodes will
 *   accelerate suspicion timers in a manner which will cause the timeout
 *   to reach the base SuspicionTimeout before that elapses, so this value
 *   will typically only come into play if a node is experiencing issues
 *   communicating with other nodes. It should be set to a something fairly
 *   large so that a node having problems will have a lot of chances to
 *   recover before falsely declaring other nodes as failed, but short
 *   enough for a legitimately isolated node to still make progress marking
 *   nodes failed in a reasonable amount of time.
 *
 * - **pushPullInterval**
 *
 *   The interval between complete state syncs.
 *   Complete state syncs are done with a single node over TCP and are
 *   quite expensive relative to standard gossiped messages. Setting this
 *   to zero will disable state push/pull syncs completely.
 *
 *   Setting this interval lower (more frequent) will increase convergence
 *   speeds across larger clusters at the expense of increased bandwidth
 *   usage.
 *
 * - **probeInterval**
 *
 *   The interval between random node probes. Setting
 *   this lower (more frequent) will cause the memberlist cluster to detect
 *   failed nodes more quickly at the expense of increased bandwidth usage
 *
 * - **probeTimeout**
 *
 *   The timeout to wait for an ack from a probed node
 *   before assuming it is unhealthy. This should be set to 99-percentile
 *   of RTT (round-trip time) on your network.
 *
 * - **disableTcpPings**
 *
 *   Set this field will turn off the fallback TCP pings that are attempted
 *   if the direct UDP ping fails. These get pipelined along with the
 *   indirect UDP pings.
 *
 * - **awarenessMaxMultiplier**
 *
 *   Increase the probe interval if the node
 *   becomes aware that it might be degraded and not meeting the soft real
 *   time requirements to reliably probe other nodes.
 *
 * - **gossipInterval**
 *
 *   The interval between sending messages that need
 *   to be gossiped that haven't been able to piggyback on probing messages.
 *   If this is set to zero, non-piggyback gossip is disabled. By lowering
 *   this value (more frequent) gossip messages are propagated across
 *   the cluster more quickly at the expense of increased bandwidth.
 *
 * - **gossipNodes**
 *
 *   The number of random nodes to send gossip messages to
 *   per `gossip_interval`. Increasing this number causes the gossip messages
 *   to propagate across the cluster more quickly at the expense of
 *   increased bandwidth.
 *
 * - **gossipToTheDeadTime**
 *
 *   The interval after which a node has died that
 *   we will still try to gossip to it. This gives it a chance to refute.
 *
 * - **gossipVerifyIncoming**
 *
 *   Controls whether to enforce encryption for incoming
 *   gossip. It is used for upshifting from unencrypted to encrypted gossip on
 *   a running cluster.
 *
 * - **gossipVerifyOutgoing**
 *
 *   Controls whether to enforce encryption for outgoing
 *   gossip. It is used for upshifting from unencrypted to encrypted gossip on
 *   a running cluster.
 *
 * - **enableCompression**
 *
 *   Used to control message compression. This can
 *   be used to reduce bandwidth usage at the cost of slightly more CPU
 *   utilization. This is only available starting at protocol version 1.
 *
 * - **secretKey**
 *
 *   Used to initialize the primary encryption key in a keyring.
 *   The primary encryption key is the only key used to encrypt messages and
 *   the first key used while attempting to decrypt messages. Providing a
 *   value for this primary key will enable message-level encryption and
 *   verification, and automatically install the key onto the keyring.
 *   The value should be either 16, 24, or 32 bytes to select AES-128,
 *   AES-192, or AES-256.
 *
 * - **delegateProtocolVersion**
 *
 *   Used to guarantee protocol-compatibility
 *   for any custom messages that the delegate might do (broadcasts,
 *   local/remote state, etc.). If you don't set these, then the protocol
 *   versions will just be zero, and version compliance won't be done.
 *
 * - **delegateProtocolMin**
 *
 *   Used to guarantee protocol-compatibility
 *   for any custom messages that the delegate might do (broadcasts,
 *   local/remote state, etc.). If you don't set these, then the protocol
 *   versions will just be zero, and version compliance won't be done.
 *
 * - **delegateProtocolMax**
 *
 *   Used to guarantee protocol-compatibility
 *   for any custom messages that the delegate might do (broadcasts,
 *   local/remote state, etc.). If you don't set these, then the protocol
 *   versions will just be zero, and version compliance won't be done.
 *
 * - **dnsConfigPath**
 *
 *   Points to the system's Dns config file, usually located
 *   at `/etc/resolv.conf`. It can be overridden via config for easier testing.
 *
 * - **handoffQueueDepth**
 *
 *   Size of Memberlist's internal channel which handles UDP messages. The
 *   size of this determines the size of the queue which Memberlist will keep
 *   while UDP messages are handled.
 *
 * - **packetBufferSize**
 *
 *   Maximum number of bytes that memberlist will put in a packet (this
 *   will be for UDP packets by default with a NetTransport). A safe value
 *   for this is typically 1400 bytes (which is the default). However,
 *   depending on your network's MTU (Maximum Transmission Unit) you may
 *   be able to increase this to get more content into each gossip packet.
 *
 * - **deadNodeReclainTime**
 *
 *   Controls the time before a dead node's name can be
 *   reclaimed by one with a different address or port. By default, this is 0,
 *   meaning nodes cannot be reclaimed this way.
 *
 * - **requireNodeNames**
 *
 *   Controls if the name of a node is required when sending
 *   a message to that node.
 *
 * - **allowedCIDRs**
 *
 *   If null, allow any connection (default), otherwise specify all networks
 *   allowed to connect (you must specify IPv6/IPv4 separately)
 *   Using an empty Vec will block all connections.
 *
 * - **quickCheckInterval**
 *
 *   The interval at which we check the message
 *   queue to apply the warning and max depth.
 */
export class Options {
  /**
   * Returns a sane set of configurations for Memberlist.
   * It uses the hostname as the node name, and otherwise sets very conservative
   * values that are sane for most LAN environments. The default configuration
   * errs on the side of caution, choosing values that are optimized
   * for higher convergence at the cost of higher bandwidth usage. Regardless,
   * these values are a good starting point when getting started with memberlist.
   */
  static lan(): Options
  /** Returns the default configurations, which is the same as wan */
  constructor()
  /**
   * Returns a configuration
   * that is optimized for most WAN environments. The default configuration is
   * still very conservative and errs on the side of caution.
   */
  static wan(): Options
  /**
   * Returns a configuration
   * that is optimized for a local loopback environments. The default configuration is
   * still very conservative and errs on the side of caution.
   */
  static local(): Options
  get name(): string
  get label(): Array<number>
  get skipInboundLabelCheck(): boolean
  get bindAddr(): string
  get advertiseAddr(): string | null
  get protocolVersion(): number
  get tcpTimeout(): Duration
  get indirectChecks(): number
  get retransmitMult(): number
  get suspicionMult(): number
  get suspicionMaxTimeoutMult(): number
  get pushPullInterval(): Duration
  get probeInterval(): Duration
  get probeTimeout(): Duration
  get disableTcpPings(): boolean
  get awarenessMaxMultiplier(): number
  get gossipInterval(): Duration
  get gossipNodes(): number
  get gossipToTheDeadTime(): Duration
  get gossipVerifyIncoming(): boolean
  get gossipVerifyOutgoing(): boolean
  get enableCompression(): boolean
  get secretKey(): Array<number> | null
  get delegateProtocolVersion(): number
  get delegateProtocolMin(): number
  get delegateProtocolMax(): number
  get dnsConfigPath(): string
  get handoffQueueDepth(): number
  get packetBufferSize(): number
  get deadNodeReclaimTime(): Duration
  get requireNodeNames(): boolean
  get allowedCIDRs(): Array<string> | null
  get queueCheckInterval(): Duration
  setName(val: string): Options
  setLabel(val: Array<number>): Options
  setSkipInboundLabelCheck(val: boolean): Options
  setBindAddr(val: string): Options
  setAdvertiseAddr(val?: string | undefined | null): Options
  setProtocolVersion(val: number): Options
  setTcpTimeout(val: Duration): Options
  setIndirectChecks(val: number): Options
  setRetransmitMult(val: number): Options
  setSuspicionMult(val: number): Options
  setSuspicionMaxTimeoutMult(val: number): Options
  setPushPullInterval(val: Duration): Options
  setProbeInterval(val: Duration): Options
  setProbeTimeout(val: Duration): Options
  setDisableTcpPings(val: boolean): Options
  setAwarenessMaxMultiplier(val: number): Options
  setGossipInterval(val: Duration): Options
  setGossipNodes(val: number): Options
  setGossipToTheDeadTime(val: Duration): Options
  setGossipVerifyIncoming(val: boolean): Options
  setGossipVerifyOutgoing(val: boolean): Options
  setEnableCompression(val: boolean): Options
  setSecretKey(val?: Array<number> | undefined | null): Options
  setDelegateProtocolVersion(val: number): Options
  setDelegateProtocolMin(val: number): Options
  setDelegateProtocolMax(val: number): Options
  setDnsConfigPath(val: string): Options
  setHandoffQueueDepth(val: number): Options
  setPacketBufferSize(val: number): Options
  setDeadNodeReclaimTime(val: Duration): Options
  setRequireNodeNames(val: boolean): Options
  setAllowedCIDRs(val: Array<string>): Options
  setQueueCheckInterval(val: Duration): Options
  /**
   * Serializes the options to JSON.
   *
   * If `pretty` is `true`, the JSON will be pretty-printed.
   */
  toJSON(pretty?: boolean | undefined | null): string
  /**
   * Serializes the options to a JSON file.
   *
   * If `pretty` is `true`, the JSON will be pretty-printed.
   */
  toJSONFile(path: string, pretty?: boolean | undefined | null): void
  /** Serializes the options to YAML. */
  toYAML(): string
  /** Serializes the options to a YAML file. */
  toYAMLFile(path: string): void
  /** Deserializes the options from JSON string. */
  static fromJSON(src: string): Options
  /** Deserializes the options from YAML file. */
  static fromYAMLFile(src: string): Options
  /** Deserializes the options from YAML string. */
  static fromYAML(src: string): Options
  /** Deserializes the options from YAML file. */
  static fromYAMLFile(src: string): Options
}
